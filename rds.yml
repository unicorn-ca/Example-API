AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: This template deploys a VPC with a pair of subnets spread
  across two Availability Zones. It deploys an Internet Gateway,
  with a default route on the public subnets. It deploys an RDS
  PostgreSQL master and single read replica database.
Parameters:
  SSMPassword:
    Description: Parameter name under which to store the master password for the RDS instance.
    Type: String
    Default: 'password'
  SSMUsername:
    Description: Parameter name under which to store the master username for the RDS instance.
    Type: String
    Default: '/variables/lambda/username'
  IAMRoleName:
    Description: Name of the IAM Role that should be used when creating the IAM Role that Lambda functions will be assuming
    Type: String
    Default: 'RDS-LambdaExecutionRole'
  VPCId:
    Type: "AWS::EC2::VPC::Id"
    Default: "vpc-804071e7"
  VpcCIDR:
    Description: IP range (CIDR notation) for this VPC
    Type: String
    Default: "172.31.0.0/16"
    AllowedPattern: "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}"
  SubnetMasterCIDR:
    Description: IP range (CIDR notation) for the subnet in the RDS Master Availability Zone
    Type: String
    Default: "172.31.16.0/20"
    AllowedPattern: "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}"
  SubnetReplicaCIDR:
    Description: IP range (CIDR notation) for the subnet in the RDS Read Replica Availability Zone
    Type: String
    Default: "172.31.32.0/20"
    AllowedPattern: "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}"
  DBInstanceIdentifier:
    Type: String
    Default: "vulndb"
  ReplicaInstanceIdentifier:
    Type: String
    Default: "demo-replica"
  DBEngine:
    Type: String
    Default: "postgres"
  DBEngineVersion:
    Type: String
    Default: "11.5"
  DBSourceRegion:
    Type: String
    Default: "ap-southeast-2"
  DBInstanceClass:
    Type: String
    Default: "db.t3.small"
  DBStorageType:
    Type: String
    Default: "gp2"
  DBAllocatedStorage:
    Type: Number
    Default: 10
Resources:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCId
      Tags:
        - Key: Name
          Value: Public Route Table
  SubnetMasterRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: 'subnet-82b3b8cb'
  SubnetReplicaRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: 'subnet-e769e1bf'
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DBSubnetGroup for RDS instances
      SubnetIds: [
        "subnet-e769e1bf",
        "subnet-82b3b8cb",
        "subnet-4f140d28"
      ]
  VpcDefaultSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 'sg-96ae5fe8'
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432

  DemoMasterInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier:
        Ref: DBInstanceIdentifier
      DBName: "vulndb"
      AllocatedStorage:
        Ref: DBAllocatedStorage
      DBInstanceClass:
        Ref: DBInstanceClass
      StorageType:
        Ref: DBStorageType
      Engine:
        Ref: DBEngine
      EngineVersion:
        Ref: DBEngineVersion
      MasterUsername: !GetAtt InvokeGetMasterUsernameLambda.Data
      MasterUserPassword: '{{resolve:ssm-secure:/variables/lambda/password:1}}'
      PubliclyAccessible: True
      Tags:
        - Key: Name
          Value: "Demo RDS PostgreSQL Master"
      VPCSecurityGroups: ['sg-96ae5fe8','sg-00bdcc5a9673b99a2']
      DBSubnetGroupName:
        Ref: DBSubnetGroup

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"
      Policies:
        -
          PolicyName: "SSM-Parameter-Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/variables/lambda*'
        -
          PolicyName: "S3-Bucket-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - s3:Get*
                  - s3:List*
                Resource: 'arn:aws:s3:::*'
      RoleName: !Ref IAMRoleName

  GetMasterUsernameLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda Function that will retrieve password from encrypted SSM parameter.
      FunctionName: GetUsernameLambda
      CodeUri:
        Bucket: 'unicorn-dev-serverlessdeploymentbucket-o8itbahb88yw'
        Key: 'serverless/unicorn/dev/1572903642540-2019-11-04T21:40:42.540Z/unicorn.zip'
      Handler: get_parameter.handler
      MemorySize: 128 # Minimum allowed value. No reason for this lambda function to use more than 128MB.
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 10

  InvokeGetMasterUsernameLambda:
    Type: AWS::CloudFormation::CustomResource
    DeletionPolicy: Retain
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt GetMasterUsernameLambda.Arn
      ParameterName:
        Ref: SSMUsername

Outputs:
  EndpointMaster:
    Description: "Endpoint of the newly created RDS master"
    Value: !GetAtt "DemoMasterInstance.Endpoint.Address"

